diff --git a/dist/server.js b/dist/server.js
index 5287fcba3e5f6c0252f81e6fc03e08f72e58ab80..a246d9ebe01b94ac95ec14fa3703d107caf01514 100644
--- a/dist/server.js
+++ b/dist/server.js
@@ -37,7 +37,7 @@ const createRequestHandler = (build, mode$1) => {
       router.isRouteErrorResponse(error) && error.error ? error.error : error);
     }
   });
-  return async function requestHandler(request, loadContext = {}) {
+  return async function requestHandler(request, loadContext = {}, criticalStyles) {
     let url = new URL(request.url);
     let matches = routeMatching.matchServerRoutes(routes$1, url.pathname);
     let handleError = error => errorHandler(error, {
@@ -60,7 +60,7 @@ const createRequestHandler = (build, mode$1) => {
     } else if (matches && matches[matches.length - 1].route.module.default == null && matches[matches.length - 1].route.module.ErrorBoundary == null) {
       response = await handleResourceRequestRR(serverMode, staticHandler, matches.slice(-1)[0].route.id, request, loadContext, handleError);
     } else {
-      response = await handleDocumentRequestRR(serverMode, build, staticHandler, request, loadContext, handleError);
+      response = await handleDocumentRequestRR(serverMode, build, staticHandler, request, loadContext, handleError, criticalStyles);
     }
     if (request.method === "HEAD") {
       return new Response(null, {
@@ -132,7 +132,7 @@ async function handleDataRequestRR(serverMode, staticHandler, routeId, request,
     });
   }
 }
-async function handleDocumentRequestRR(serverMode, build, staticHandler, request, loadContext, handleError) {
+async function handleDocumentRequestRR(serverMode, build, staticHandler, request, loadContext, handleError, criticalStyles) {
   let context;
   try {
     context = await staticHandler.query(request, {
@@ -163,6 +163,7 @@ async function handleDocumentRequestRR(serverMode, build, staticHandler, request
     manifest: build.assets,
     routeModules: entry.createEntryRouteModules(build.routes),
     staticHandlerContext: context,
+    criticalStyles,
     serverHandoffString: serverHandoff.createServerHandoffString({
       url: context.location.pathname,
       state: {
@@ -170,7 +171,8 @@ async function handleDocumentRequestRR(serverMode, build, staticHandler, request
         actionData: context.actionData,
         errors: errors.serializeErrors(context.errors, serverMode)
       },
-      future: build.future
+      future: build.future,
+      criticalStyles
     }),
     future: build.future,
     serializeError: err => errors.serializeError(err, serverMode)